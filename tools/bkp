#!/usr/bin/env perl
#
## bkp   by D. S. "Pat" Patterson
##
##   Ver 3.0   07 May 1997 - original Perl4 version
##   Ver 4.0   20 Sep 2012 - Rewrite in Ruby
##   Ver 5.0   16 Nov 2017 - Rewrite in Perl5
##   Ver 5.1   15 Mar 2018 - Add -v, -m, -r features
##
## NAME
##   bkp - Creates numbered version or date-time-stamp backup of specified file.
##
## SYNTAX
##   bkp [options] file1 [file2 [...]]
##
##   -a   When backing up multiple objects either explicitly or via a wildcard
##        pattern, back up directories in addition to files.
##
##   -b   Causes programs to be backed up in a backup directory
##        named "./.backup".  If the directory does not exist, bkp
##        will attempt to create it on the fly.
##
##   -B bkp_dir   Allows the user to specify the backup directory
##        to be used to archive the backup copies.  The backup file
##        numbering is based on files found in the specified backup
##        directory.
##
##   -f   Force backup even if last backup is identical.
##
##   -g   Backup file(s) to a date-timestamp named folder.
##        In this mode, backed-up file names are not modified.
##
##   -h   Show this help page.
##
##   -m   Move current file to backup only.  Assumes -f.
##
##   -q   Do not report info on successful backups.
##
##   -r N   Restore - Copy backup #N to file.
##
##   -s '<sep-char>'   Set the separator character.
##        Can by any character except '.'.
##
##   -t   Use a date-time-stamp for the backup version number.
##        The format is YYYYMMDD-HHMMSS.
##
##   -V N   Turn on debug mode level "N".  N is the bitwise OR of:
##            1 - ad-hoc debugging
##            2 - function tracing
##            4 - built-in debug printing
##
##   -z   Ignore settings in $BKP_ARGS.
##
## DESCRIPTION
##   Specified file "filename.fext" is copied to "filename,N.fext", where N
##   is the (highest + 1) backup version number of file in the current
##   directory (or the current date-time-stamp if -t is given).
##
##   The original file is never altered.
##
##   The following files are copied to back up versions as follows:
##     bkp filename.fext  -->  filename,0.fext
##     bkp filename.      -->  filename,0.
##     bkp filename       -->  filename,0
##     bkp .fext          -->  .fext,0
##
##   fext is defined as the part of the filename after the final . if any.
##
##   If filename is a softlink, it is ignored.
##
##   If filename is a directory, backup trys to copy the directory
##   recursively to the backup filename.
##
##   If filename does not exist, no backup is made.
##
##   If the file list holds more than 1 item, directories are ignored unless
##   the -a switch is included.
##
## ENVIRONMENT VARIABLES
##
##   Default arguments can be set in the environment variable $BKP_ARGS.
##   Command line arguments take precedence.
##
use strict;
use warnings;

use Getopt::Std;
use File::Compare;
use File::Copy 'cp';
use File::Copy 'move';
use File::Path 'make_path';
use File::Path 'rmtree';

our %ARG                  = ();                 # Argument hash
our @BARGS                = ();                 # Bare Argument list

our $g_bkp_dir            = '.';                # directory in which to place backups
our $g_bkp_sep            = ',';                # separator char for backup versioning
our $g_fpath              = '';                 # current working file path
our $g_rel_bkp_dir        = '';                 # current working relative backup path
our $g_fname              = '';                 # current working file name
our $g_fsep               = '';                 # current working file name/ext separator
our $g_fext               = '';                 # current working file ext
our $g_regex_type         = '';                 # current working filename pattern type 1 - 4
our $g_regex_filter       = '';                 # current working versioned backup file name regex filter
our $g_prev_bkp_filename  = '';
our $g_force_copy         = 0;                  # if true, force program to make a duplicate backup copy
our $g_quiet_mode         = 0;                  # if true, does not report backup copy status
our $g_dir_requires_arg_a = 0;                  # if true, ARG{'a'} must be present to copy directories
our $g_shell_args         = 1;                  # if true, process $BKP_ARGS shell variable (if present)
our @g_fspec_list         = ();                 # Global FileSpec list


#=========================================================================
# = function: main
#
sub main ()  # 04XX
{
    dbg::push (2, "main");

    if ($g_shell_args)
    {
        # Pre-concatenate shell $BKP_ARGS fields to @ARGV:

        if (exists $ENV{'BKP_ARGS'})
        {
            my $a = $ENV{'BKP_ARGS'}  if (exists $ENV{'BKP_ARGS'});

            my @a = split (/ +/, $a);

            push (@a, @ARGV);

            dbg::print_list (2, "a", \@a);

            @ARGV = @a;
        }
    }

    captureArgs ('abB:fghmqr:tV:z');

    # Do initial processing of the argument list, including
    # creating a list of files to be backed up:
    processArgs ();


    # Main Loop:

    # Loop through each file_name to be backed up and
    # process it:
    foreach my $file_spec (@g_fspec_list)
    {
        backupFile ($file_spec);
    }

    dbg::pop (2, "main");
}

#=========================================================================
# = function: captureArgs
#
# Description:
#   Capture all arguments from the command line (@ARGV) and place them in %ARG hash.
#   Initializes all optional args to ''.  Bare arguments are placed in @BARGS list.
#
#   All captured bare args are placed in a list in $ARG{'0'}.
#
# Usage:
#   $Options  Options token string
#
sub captureArgs ()  # 06XX
{
    my ($Options) = @_;

    dbg::push (2, "captureArgs");

    dbg::print_list (2, "ARGV l1", \@ARGV);
    dbg::print_hash (2, "ARG  l1", \%ARG);

    # Initialize all options in %ARG:
    my @opts = split (//, $Options);

    for my $opt (@opts)
    {
        $ARG{$opt} = ''  if ($opt =~ /\w/);
    }

    do
    {
        # Parse the argument list and place the information into a global $g_ARGV_Hash:
        getopts ($Options, \%ARG);

        if ($ARGV[0])
        {
            push (@BARGS, $ARGV[0]);
            splice (@ARGV, 0, 1, ());
        }
    } while ($ARGV[0]);

    dbg::print_list (2, "ARGV  l2", \@ARGV);
    dbg::print_hash (2, "ARG   l2", \%ARG);
    dbg::print_list (2, "BARGS l2", \@BARGS);

    dbg::pop (2, "captureArgs");
}

#=========================================================================
# = function: processArgs
#
sub processArgs ()  # 08XX
{
    dbg::push (2, "processArgs");

    # Process arg -h, --help
    usage ()  if ($ARG{'h'});

    # Ensure that option -b is not used with -B:
    if ($ARG{'b'}  &&  $ARG{'B'})
    {
        usage("Error 0801: only one of -b or -B <backup-dir> may be specified.");
    }

    # Turn on force mode (make a dup backup) if -f
    $g_force_copy = ($ARG{'f'});

    # Turn on quiet mode (don't report successful backups) if -q
    $g_quiet_mode = ($ARG{'q'});

    # Process arg -b
    $g_bkp_dir = '.backup'  if ($ARG{'b'});

    # Process arg -B <backup-dir>
    if ($ARG{'B'})
    {
        $g_bkp_dir = $ARG{'B'};

        if (! $g_bkp_dir)
        {
            usage('Error 0803: -B <backup-dir> parameter was not specified.');
        }
    }

    # Trim trailing / from backup directory specification (except if '/')
    if ($g_bkp_dir =~ m|/$|  &&  $g_bkp_dir ne '/')
    {
        chop ($g_bkp_dir);
    }

    dbg::log (4, "$g_bkp_dir='$g_bkp_dir'");

    # Create a list of files to backup
    foreach my $fspec (@BARGS)
    {
        dbg::log (4, "- bkp '$fspec':");

        if ($ARG{'r'} ne '')
        {
            push (@g_fspec_list, $fspec);
        }
        elsif (-e $fspec)
        {
            if (-f $fspec  ||  -d $fspec)
            {
                push (@g_fspec_list, $fspec);
            }
            else
            {
                print ("Error 0805: Cannot backup $fspec -- must be a plain file or directory.\n");
            }
        }
        else
        {
            print ("Error 0807: $fspec does not exist.\n");
        }
    }

    if (! @g_fspec_list)
    {
        print ("Error 0809: No file specified to back up.  Exiting.\n");

        exit (-1);
    }

    if (scalar @g_fspec_list >= 2)
    {
        $g_dir_requires_arg_a = 1;
    }

    dbg::print_list (2, "g_fspec_list", \@g_fspec_list);

    dbg::pop (2, "processArgs");
}

#=========================================================================
# = function backupFile
#
# Description:
#   This method choreographs all the steps needed to backup a file to a
#   new versioned backup number, as well as any alternative actions.
#
# Usage:
#   $Fspec   fspec of file to be backed-up
#
sub backupFile ($)  # 12XX
{
    my ($Fspec) = @_;

    dbg::push (2, "backupFile", "Fspec='$Fspec'");

    my $fspec_type = '';

    my $skip       = '';

    if ($ARG{'r'} ne '')
    {
        $fspec_type = 'r';
    }
    elsif (-f $Fspec)
    {
        $fspec_type = 'f';
    }
    elsif (-d $Fspec)
    {
        if (! $g_dir_requires_arg_a  ||  exists ($ARG{'a'}))
        {
            $fspec_type = 'd';
        }
        else
        {
            $skip = 1;
        }
    }

    # We can backup regular files and directories only:
    if ($fspec_type)
    {
        if ($Fspec !~ /^\.{1,2}$/  &&  $Fspec ne $g_bkp_dir)
        {
            dbg::log (4, "Backing up $Fspec:");

            if (decomposeFilename ($Fspec))
            {
                if (generateRegexFilter ())
                {
                    my $nvn = '';

                    if ($ARG{'t'}  ||  $ARG{'g'})
                    {
                        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();

                        $nvn = sprintf ("%s%02s%02s-%02s%02s%02s", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

                        determineBackupDir ($nvn);
                    }
                    else
                    {
                        determineBackupDir ($nvn);

                        $nvn = generateNextVerNumber ();
                    }

                    if ($ARG{'r'} eq '')
                    {
                        # Backup mode: (normal)
                        dbg::log (4, "b nvn=$nvn");

                        if ($nvn ne '-1')
                        {
                            my $new_fspec = ($ARG{'g'}  ?  $Fspec  :  generateBkpFilename ($nvn));

                            dbg::log (4, "new_fspec=$new_fspec");

                            sendToDest ($Fspec, $fspec_type, $new_fspec);
                        }
                    }
                    else
                    {
                        # Restore mode:
                        $nvn = $ARG{'r'};

                        dbg::log (4, "r nvn=$nvn");

                        my $restore_fspec = ($ARG{'g'}  ?  $Fspec  :  generateBkpFilename ($nvn));

                        dbg::log (4, "restore_fspec=$restore_fspec");

                        if (-e  $restore_fspec)
                        {
                            if (-f $restore_fspec)
                            {
                                $fspec_type = 'f';
                            }
                            elsif (-d $restore_fspec)
                            {
                                $fspec_type = 'd';
                            }
                            else
                            {
                                $fspec_type = '';
                            }

                            if ($fspec_type)
                            {
                                deleteFspec ($Fspec);

                                sendToDest ($restore_fspec, $fspec_type, $Fspec);
                            }
                            else
                            {
                                print ("Error 1201: Cannot restore $restore_fspec.\n");
                            }
                        }
                        else
                        {
                            print ("Error 1203: Cannot restore -- file '$restore_fspec' does not exist.\n");
                        }
                    }
                }
            }
        }
    }
    else
    {
        if ($skip)
        {
            print ("Warning 1205: Skipping $Fspec.\n");
        }
        elsif (-e $Fspec)
        {
            print ("Error 1207: Cannot backup $Fspec.\n");
        }
        else
        {
            print ("Error 1209: Cannot backup -- file '$Fspec' does not exist.\n");
        }
    }

    dbg::pop (2, "backupFile");
}

#=========================================================================
# = function: decomposeFilename
#
# Description:
#   This method takes the file spec and splits it into a filename
#   and a file extension and places the results into the member
#   variables $g_fpath, $g_fname, $g_fsep and $g_fext.
#
# Usage:
#   $Fspec   fspec of file to be backed-up
#
sub decomposeFilename ($)  # 16XX
{
    my ($Fspec) = @_;

    dbg::push (2, "decomposeFilename");

    # Working member variables:
    my $success  = 0;
    my $filename = '';

    $g_fpath = '';
    $g_fname = '';
    $g_fsep  = '';
    $g_fext  = '';

    do
    {
        # Remove any trailing slash from the Fspec
        $Fspec =~ s|/$||;

        dbg::log (4, "01: Fspec='$Fspec'");

        last  unless ($Fspec);

        # extract any path from Fspec and place in $g_fpath:
        if ($Fspec =~ m|/|)
        {
            ($g_fpath, $filename) = ($Fspec =~ m|^(.+)/([^/]+)$|);

             dbg::log (4, "01.1: g_fpath='$g_fpath' filename='$filename'");
        }
        else
        {
            $filename = $Fspec;
        }

        dbg::log (4, "02: g_fpath='$g_fpath' filename='$filename'");

        last  unless ($filename);

        # decompose the file name into prefix and suffix:
        #
        # Further process this fspec in case of multiple . in name
        # This match takes the last . as the meaningful one.

        if ($filename =~ m|\.|)
        {
            ($g_fname, $g_fsep, $g_fext) = ($filename =~ m|^(.*)(\.)([^.]*)$|);
        }
        else
        {
            $g_fname = $filename;
        }

        $success = 1;

    } while (0);

    dbg::log (4, "g_fpath='$g_fpath' g_fname='$g_fname' g_fsep='$g_fsep' g_fext=$g_fext");

    dbg::pop (2, "decomposeFilename", $success);

    # Return success: true/false
    return ($success);
}

#=========================================================================
# = function: determineBackupDir
#
# Description:
#   Determine the backup directory.  It is written to $g_rel_bkp_dir.
#
# Usage:
#   $Nvn   Next version number
#
sub determineBackupDir ($)  # 20XX
{
    my ($Nvn) = @_;

    dbg::push (2, "determineBackupDir");

    # Determine the backup path:
    if ($g_fpath)
    {
        $g_rel_bkp_dir = ($g_bkp_dir ne '.'  ?  "$g_fpath/$g_bkp_dir/"  :  "$g_fpath/");
    }
    else
    {
        $g_rel_bkp_dir = ($g_bkp_dir ne '/'  ?  "$g_bkp_dir/"  :  "/");
    }

    if ($ARG{'g'})
    {
        $g_rel_bkp_dir .= "$Nvn/";
    }

    dbg::log (4, "g_rel_bkp_dir ='$g_rel_bkp_dir'");

    if (! -d $g_rel_bkp_dir)
    {
        make_path ($g_rel_bkp_dir, { verbose => 1 });
    }

    dbg::pop (2, "determineBackupDir");
}

#=========================================================================
# = function: generateRegexFilter
#
# Description:
#   Classifies $g_fname (which has been stripped of its path)
#   into 1 of 4 name-type categories.  It then generates the necessary
#   Regex filter to look for previous backups of the file.
#
# Usage:
#
sub generateRegexFilter ()  # 24XX
{
    dbg::push (2, "generateRegexFilter");

    # Set up search patterns for previous backups of this file:

    if (($g_fname eq ''  ||  $g_fname eq '.')  &&  $g_fext eq '')
    {
        # '.' and '..' will be rejected here:

        $g_regex_filter = '';

        $g_regex_type = 0;
    }
    elsif (! $g_fname  &&  $g_fext)  # e.g.:  .1  .txt
    {
        dbg::log (4, '01 g_fsep g_fext');

        # When there is only a fext, backup ver no is appended to the end:
        $g_regex_filter = '^\\.' . $g_fext . '\\' . $g_bkp_sep . '(\\d+)$';

        $g_regex_type = 1;
    }
    elsif ($g_fname  &&  ! $g_fext)  # e.g.:  dog  .cat
    {
        if (! $g_fsep)               # e.g.:  dog
        {
            dbg::log (4, '02 g_fname');

            # When there is only an fname, the backup version is appended to the end.
            $g_regex_filter = '^' . $g_fname . '\\' . $g_bkp_sep . '(\\d+)$';

            $g_regex_type = 2;
        }
        else                         # e.g.:  cat.
        {
            dbg::log (4, '03 g_fname g_fsep');

            # When there is only an fname and '.', the backup ver no is appended to the fname.
            $g_regex_filter = '^' . $g_fname . '\\' . $g_bkp_sep . '(\\d+)\.$';

            $g_regex_type = 3;
        }
    }
    else                             # e.g.:  cat.txt  dog.1
    {
        dbg::log (4, '04 g_fname g_fsep g_fext');

        # When there is an fname and fext, the backup ver no is appended to the fname.
        $g_regex_filter = '^' . $g_fname . '\\' . $g_bkp_sep . '(\\d+)\.'      . $g_fext . '$';

        $g_regex_type = 4;
    }

    dbg::log (4, "g_regex_filter='$g_regex_filter' -- type $g_regex_type");

    dbg::pop (2, "generateRegexFilter");

    return $g_regex_type;
}

#=========================================================================
# = function: generateNextVerNumber
#
# Description:
#   This method searches $g_rel_bkp_dir for any backup versions of the file.
#   The highest versioned backup file, if any, is then checked to see if it
#   differs from the current file.  If it does, a new version
#   number is generated.
#
# Usage:
#   $g_rel_bkp_dir must be defined.
#
# Returns $next_ver, a number >= 0 as the next version number, or -1 on fail.
#
sub generateNextVerNumber ()  # 28XX
{
    dbg::push (2, "generateNextVerNumber");

    my $highest_found_ver = -1;  # highest version number found for current file to be backed-up
    my $dh;
    my $ver;
    my $next_ver = -1;

    { do {  # Note: This strange construct is necessary to use 'last' as break statement.
            # http://www.perltutorial.org/perl-do-while/

        # Look for backups that match the glob filter:
        if (-d $g_rel_bkp_dir)
        {
            if (! -r $g_rel_bkp_dir)
            {
                print ("Error 2801: Backup dir '$g_rel_bkp_dir' is not readable\n");
                last;
            }

            if (! -x $g_rel_bkp_dir  ||  ! -w $g_rel_bkp_dir)
            {
                print ("Error 2803: Backup dir '$g_rel_bkp_dir' is not writeable\n");
                last;
            }

            if (! opendir ($dh, $g_rel_bkp_dir))
            {
                print ("Error 2805: opendir() failed on '$g_rel_bkp_dir'\n");
                last;
            }

            while (readdir $dh)
            {
                dbg::log (4, "- found $_");

                ($ver) = (/$g_regex_filter/);

                if (defined ($ver)  &&  $ver ne '')
                {
                    dbg::log (4, "--- $_: ver = $ver");

                    $highest_found_ver = $ver  if ($ver > $highest_found_ver);
                }
            }
        }

        $next_ver = $highest_found_ver + 1;

    } while (0); }

    dbg::log (4, "next_ver = $next_ver");

    dbg::pop (2, "generateNextVerNumber");

    return $next_ver;
}

#=========================================================================
# = function: generateBkpFilename
#
# Description:
#   Generate the backup filename using the correct concatenation rules for
#   the file name style.
#
# Usage:
#   $Next_ver   Next backup file version number
#
sub generateBkpFilename ($)  # 32XX
{
    my ($Next_ver) = @_;

    dbg::push (2, "generateBkpFilename");

    my $new_filename = '';

    $g_prev_bkp_filename = '';

    if ($g_regex_type <= 2)
    {
        # Append next version number to the end:
        $new_filename = $g_fname . $g_fsep . $g_fext . $g_bkp_sep . $Next_ver;

        if ($Next_ver > 0)
        {
            $g_prev_bkp_filename = $g_fname . $g_fsep . $g_fext . $g_bkp_sep . ($Next_ver - 1);
        }
    }
    else
    {
        # Append next version number between filename and final '.'
        $new_filename = $g_fname . $g_bkp_sep . $Next_ver . $g_fsep . $g_fext;

        if ($Next_ver > 0)
        {
            $g_prev_bkp_filename = $g_fname . $g_bkp_sep . ($Next_ver - 1) . $g_fsep . $g_fext;
        }
    }

    dbg::log (4, "new_filename = $new_filename");

    dbg::pop (2, "generateBkpFilename");

    return $new_filename;
}

#=========================================================================
# = function: sendToDest
#
# Description:
#   Copy or Move a filespec from Source to Destination,
#   creating directories as necessary.
#
# Usage:
#   $Fspec        Source filespec
#   $Fspec_type   Source file type 'f' or 'd'
#   $New_fspec    Destination filespec
#
sub sendToDest ($$$)  # 36XX
{
    my ($Fspec, $Fspec_type, $New_fspec) = @_;

    dbg::push (2, "sendToDest");

    if ($ARG{'m'})
    {
        dbg::log (4, "moveFileToDest $Fspec $g_rel_bkp_dir $New_fspec");

        print ("$Fspec -m-> $g_rel_bkp_dir$New_fspec\n");

        moveFileToDest ($Fspec, $g_rel_bkp_dir, $New_fspec);
    }
    elsif ($Fspec_type eq 'f')
    {
        if ($ARG{'f'}  ||  compare ($Fspec, "$g_rel_bkp_dir$g_prev_bkp_filename") != 0)
        {
            dbg::log (4, "copyFileToDest $Fspec $g_rel_bkp_dir $New_fspec");

            print ("$Fspec ---> $g_rel_bkp_dir$New_fspec\n");

            copyFileToDest ($Fspec, $g_rel_bkp_dir, $New_fspec);
        }
        else
        {
            print ("$Fspec ---> identical file '$g_rel_bkp_dir$g_prev_bkp_filename' already exists!\n");
        }
    }
    else
    {
        my $full_dest_fspec = "$g_rel_bkp_dir$New_fspec";

        dbg::log (4, "copyDirToDest $Fspec $full_dest_fspec");

        print ("$Fspec ---> $full_dest_fspec\n");

        copyDirToDest ($Fspec, $full_dest_fspec);
    }

    dbg::pop (2, "sendToDest");
}

#=========================================================================
# = function: moveFileToDest
#
# Description:
#     Move a filespec from Source to Dest, creating directories as necessary.
#     If filespec is a directory, assumes Dest does not currently exist.
#
#     Note: $Target must be current working dir or one level deeper.
#
# Usage:
#     $SrcFspec   Source filespec
#     $DestPath   Target directory path
#     $DestFName  Target file name
#
sub moveFileToDest ($$)  # 38XX
{
    my ($SrcFspec, $DestPath, $DestFname) = @_;

    dbg::push (2, "moveFileToDest");

    my $target = $DestPath . $DestFname;

    dbg::log (4, "SrcFspec=$SrcFspec  target=$target");

    my $result = move ($SrcFspec, $target);

    dbg::log (4, "move result = $result");

    if (! $result)
    {
        print ("Error 3801: move ('$SrcFspec', '$target') failed.\n");
    }

    dbg::pop (2, "moveFileToDest");
}

#=========================================================================
# = function: copyFileToDest
#
# Description:
#     Copy a filespec from Source to Target,
#     creating directories as necessary.
#
#     Note: $Target must be current working dir or one level deeper.
#
# Usage:
#     $Source     Source filespec
#     $Target     Target filespec
#
sub copyFileToDest ($$)  # 40XX
{
    my ($Source, $Dest, $Filename) = @_;

    dbg::push (2, "copyFileToDest");

    my $target = "$Dest$Filename";

    dbg::log (4, "Source=$Source  target=$target");

    my $result = cp ($Source, $target);

    dbg::log (4, "cp result = $result");

    if (! $result)
    {
        print ("Error 4001: cp ('$Source', '$target') failed.\n");
    }

    dbg::pop (2, "copyFileToDest");
}

#=========================================================================
# = function: copyDirToDest
#
# Description:
#     Recursively copies directory folder tree $source to destination
#     folder $target, creating directories as necessary.
#
# Usage:
#     $Source     Source directory tree
#     $Target     Target directory tree
#
sub copyDirToDest ($$)  # 44XX
{
    _copyDirToDest (@_);  # here to resolve recursion warning
}

sub _copyDirToDest ($$)  # 48XX
{
    my ($Source, $Target) = @_;

    dbg::push (2, "_copyDirToDest");

    my $DH;

    if (opendir ($DH, $Source))
    {
        if (mkdir ($Target))  # creates the bkp dir
        {
            while (my $fentry = readdir ($DH))
            {
                dbg::log (4, "checking $fentry:");

                if ($fentry ne '.'  &&  $fentry ne '..')
                {
                    my $sub_src = "$Source/$fentry";
                    my $sub_tgt = "$Target/$fentry";

                    dbg::log (4, "sub_src=$sub_src  sub_tgt=$sub_tgt");

                    if (-d $sub_src)
                    {
                        dbg::log (4, "- $sub_src is a dir:");
                        copyDirToDest ($sub_src, $sub_tgt);
                    }
                    else
                    {
                        dbg::log (4, "- $sub_src is a file:");

                        my $result = cp ($sub_src, $sub_tgt);

                        dbg::log (4, "cp result = $result");

                        if (! $result)
                        {
                            print ("Error 4801: cp ('$sub_src', '$sub_tgt') failed.\n");
                        }
                    }
                }
            }
        }
        else
        {
            print ("Error 4803: Unable to create target directory $Target.\n");
        }
    }
    else
    {
        print ("Error 4805: Unable to open source directory $Source.\n");
    }

    dbg::pop (2, "_copyDirToDest");
}

#=========================================================================
# = function: deleteFspec
#
# Description:
#     Determines type of fspec and if it is a file or directory, deletes it.
#
# Usage:
#     $Fspec     Fspec of file or directory to delete
#
sub deleteFspec ($)  # 50XX
{
    my ($Fspec) = @_;

    dbg::push (2, "deleteFspec");

    if (-e $Fspec)
    {
        if (-f $Fspec)
        {
            dbg::log (4, "deleting file $Fspec");
            unlink ($Fspec);
        }
        elsif (-d $Fspec)
        {
            dbg::log (4, "deleting dir $Fspec");
            rmtree ($Fspec);
        }
        else
        {
            print ("Error 5001: Unable to delete $Fspec\n");
        }
    }

    dbg::pop (2, "deleteFspec");
}

#=========================================================================
# = function: usage
#
sub usage ($)  # 52XX
{
    my ($Msg) = @_;

    print ("$Msg\n\n")  if ($Msg);

    open (SELF, $0);

    while (<SELF>)
    {
        print if (/^##/);
    }

    exit (0);
}

#=========================================================================
# Class Dbglog
# Note: the debug level checking is "bitwise-or style".
# 1 - ad-hoc debugging
# 2 - function tracing
# 4 - built-in debug printing
#
# This class handles indented debug logging for single-threaded programs.
package dbg;
{
    our $debug    = 0;

    my $cs_level  = 0;  # this is the call stack level, which increases by 1 for each call.
    my @cs_name   = ();
    my $cs_indent = "";

    sub push ($$;$)
    {
        my ($dbg, $name, $param_text) = @_;

        return unless ($dbg & $debug);

        $param_text = ""  unless (defined ($param_text));

        push (@cs_name, $name);

        $cs_level += 1;

        print $cs_indent . ">" . $name . "($param_text)\n";

        $cs_indent .= "| ";
    }

    sub pop ($$;$)
    {
        my ($dbg, $name, $ret_val) = @_;

        return unless ($dbg & $debug);

        $cs_level -= 1;

        my $pushed_name = pop (@cs_name);

        my $msg = "";

        if ($name ne $pushed_name)
        {
            $msg = " dbg::pop() Error: expected $name but got $pushed_name";
        }
        elsif (defined $ret_val)
        {
            $msg = " return '$ret_val'"
        }

        $cs_indent = substr ($cs_indent, 2);

        print $cs_indent . "<" . $pushed_name . "()" . $msg . "\n";
    }

    sub log ($$)
    {
        my ($dbg, $dbg_text) = @_;

        return unless ($dbg & $debug);

        print $cs_indent . $dbg_text . "\n";
    }

    #=========================================================================
    # Function:   print_hash
    #
    # Description:
    #    Print out the contents of a hash table in key sorted order
    #    Associative Array must be passed in via the * prefix, not %.
    #
    # Usage:
    #    $dbg      Debug level required to print
    #    $Name     Printable name for the hash table.
    #    $HTRef    Reference to the hash table.  (e.g. \%hashtable)
    #    $Chop     1 to chop $value before printing
    #    $VSort    1 to sort by value (not key) (No nested tables)
    #    $Indent   Nbr of spaces to indent table
    #    $Type     '@' if value is an ArrayRef, '%' if value is a HashRef.
    #              '=' is hybrid table in which all elements are ArrayRefs
    #                  except the element for key '=', which is a HashRef.
    #
    # Return Values:
    #    None.
    sub print_hash
    {
        my ($dbg, $Name, $HTRef, $Chop, $VSort, $Indent, $Type) = @_;

        return unless ($dbg & $debug);

        $Chop   = ''  unless defined ($Chop);
        $VSort  = ''  unless defined ($VSort);
        $Indent = 2   unless defined ($Indent);
        $Type   = ''  unless defined ($Type);

        my ($key, $value, %htt, $list);

        dbg::log ($dbg, "HT %$Name:");

        if ($VSort)
        {
            foreach $key (keys (%$HTRef))
            {
                $value = $$HTRef{$key};
                $htt{$value} = $key;
            }

            foreach $key (sort (keys (%htt)))
            {
                $value = $htt{$key};
                chomp ($value)  if ($Chop);
                dbg::log ($dbg, ' ' x $Indent . "'$key' => '$value'");
            }
        }
        else
        {
            foreach $key (sort (keys (%$HTRef)))
            {
                $value = $$HTRef{$key};

                if ($Type eq '@'  or  ($Type eq '='  and  $key ne '='))
                {
                    dbg::log ($dbg, ' ' x $Indent . "'$key' => ");
                    print_list ($dbg, $value, 0, 0, $Indent + 2);
                }
                elsif ($Type eq '%'  or  ($Type eq '='  and  $key eq '='))
                {
                    dbg::log ($dbg, ' ' x $Indent . "'$key' => ");
                    print_hash ($dbg, "", $value, 0, 0, $Indent + 2);
                }
                else
                {
                    chomp ($value)  if ($Chop);
                    dbg::log ($dbg, ' ' x $Indent . "'$key' => '$value'");
                }
            }
        }
    }

    #=========================================================================
    # Function:   print_list
    #
    # Description:
    #    Print out the contents of a list optionally in sorted order.
    #    List/Array must be passed in via the * prefix, not @.
    #
    #= Usage:
    #    $dbg      Debug level required to print
    #    $Name     Printable name for the hash table.
    #    $ListRef  Reference to a list.  (e.g. \@list)
    #    $Chop     1 to chop $value before printing.
    #    $Sort     1 to sort list.
    #    $Indent   Nbr of spaces to indent table
    #    $Type     '@' if value is an Array, '%' if value is a Hash.
    #
    # Return Values:
    #    None.
    sub print_list
    {
        my ($dbg, $Name, $ListRef, $Chop, $Sort, $Indent, $Type) = @_;

        return unless ($dbg & $debug);

        my ($value, $i);

        $Chop   = ''  unless defined ($Chop);
        $Sort   = ''  unless defined ($Sort);
        $Indent = 2   unless defined ($Indent);
        $Type   = ''  unless defined ($Type);

        dbg::log ($dbg, "List \@$Name:");

        if ($Sort)
        {
            foreach $value (sort (@$ListRef))
            {
                chomp  if ($Chop);
                dbg::log ($dbg, ' ' x $Indent . "'$value'");
            }
        }
        else
        {
            $i = 0;  # Array index
            foreach $value (@$ListRef)
            {
                if ($Type eq '@')
                {
                    dbg::log ($dbg, ' ' x $Indent . "[$i] =");
                    print_list ($dbg, $value, 0, 0, $Indent + 2);
                }
                elsif ($Type eq '%')
                {
                    dbg::log ($dbg, ' ' x $Indent . "[$i] =");
                    print_hash ($dbg, "", $value, 0, 0, $Indent + 2);
                }
                else
                {
                    chomp ($value)  if ($Chop);
                    dbg::log ($dbg, ' ' x $Indent . "[$i] = '$value'");
                }

                $i++;
            }
        }
    }
} # end package dbg

#=========================================================================
#=========================================================================

# Check arg list for special flags:
for my $arg (@ARGV)
{
    $dbg::debug   = ($arg =~ /^\d$/  ?  $arg  :  -2)  if ($dbg::debug == -1);

    $dbg::debug   = -1  if ($arg eq '-V');

    $g_shell_args =  0  if ($arg eq '-z');
}

die "Error: -V requires a numeric argument"  if ($dbg::debug < 0);

# Run main program:
::main ();

#=========================================================================
#=========================================================================

__END__

